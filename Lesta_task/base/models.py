from django.db import models
from django.contrib.auth.models import AbstractUser


# üë§ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
class User(AbstractUser):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–ª—è: username, password –∏ —Ç.–¥.
    def __str__(self):
        return self.username


# üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
class Document(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='documents')
    file = models.FileField(upload_to='documents/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.file.name} (–æ—Ç {self.user.username})"


# üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
class Collection(models.Model):
    name = models.CharField(max_length=255)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='collections')
    documents = models.ManyToManyField(Document, related_name='collections')

    def __str__(self):
        return f"{self.name} (–≤–ª–∞–¥–µ–ª–µ—Ü: {self.user.username})"


# üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
class FileMetric(models.Model):
    filename = models.CharField(max_length=255)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    file_size = models.IntegerField(help_text="–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö")
    processed = models.BooleanField(default=False)
    error_count = models.IntegerField(default=0)
    processing_time = models.FloatField(
        help_text="–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö", null=True, blank=True
    )

    def __str__(self):
        return f"{self.filename} ({self.file_size} –±–∞–π—Ç)"
